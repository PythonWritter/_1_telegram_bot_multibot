import json
import time

import telebot
from telebot import types
from telebot import util
import requests
from googletrans import Translator
from pyowm import OWM
from pyowm.utils.config import get_default_config

import config as cfg

bot_text = {
    'enter_city': '–ö—Ä–æ–º–µ <i>–≥.–ö–∏–µ–≤–∞, –û–¥–µ—Å—Å—ã, –õ—å–≤–æ–≤ –∏ —Ç–¥</i>, –í—ã –º–æ–∂–µ—Ç–µ –≤–≤–µ—Å—Ç–∏ –∞–±—Å–æ–ª—é—Ç–Ω–æ –ª—é–±–æ–π –≥–æ—Ä–æ–¥.\n–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞: ',
    'greeting': '\n–Ø - <b>Kroft-Bot</b> ü§ñ\n–° –ø–æ–º–æ—â—å—é –º–µ–Ω—è —Ç—ã –º–æ–∂–µ—à—å —É–∑–Ω–∞—Ç—å:\n‚òÄÔ∏è –ü–æ–≥–æ–¥—É\nüí∞ –ö—É—Ä—Å—ã –≤–∞–ª—é—Ç\nüìú –ü–µ—Ä–µ–≤–æ–¥ —Å–ª–æ–≤ –∏ —Ç–µ–∫—Å—Ç–∞\nüí° –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ —Ñ–∞–∫—Ç—ã –æ —á–∏—Å–ª–∞—Ö\n\n‚öô –û—Ç–ø—Ä–∞–≤—å –∫–æ–º–∞–Ω–¥—É <b> /help </b>, —á—Ç–æ–± –∑–∞–π—Ç–∏ –≤ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –º–µ–Ω—é –∫–æ–º–∞–Ω–¥.'
}

bot = telebot.TeleBot(cfg.date['BOT_TOKEN'])
response = requests.get(cfg.date['PRIVAT_24_API_KEY']).json()


# main menu
@bot.message_handler(commands=['start'])
def start(message):
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    btn1 = types.KeyboardButton('üå§Ô∏è –ü–æ–≥–æ–¥–∞')
    btn2 = types.KeyboardButton('üí∞ –ö—É—Ä—Å –≤–∞–ª—é—Ç')
    btn3 = types.KeyboardButton('üü¢ –î–∞–ª–µ–µ')
    kb.add(btn1, btn2, btn3)
    user_name = str(message.from_user.first_name)
    bot.send_message(message.chat.id, f'–ü—Ä–∏–≤–µ—Ç <b>{user_name}!</b>\n' + bot_text['greeting'], parse_mode='html')
    time.sleep(1)
    pic_1 = open(r'pic_1.jpg', 'rb')
    bot.send_photo(message.chat.id,pic_1, '<i>–ï—Å–ª–∏ –≤–¥—Ä—É–≥ –ø—Ä–æ–ø–∞–¥—É—Ç –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é, –Ω–∞–∂–º–∏ –Ω–∞ —ç—Ç—É</i> <b>–∫–Ω–æ–ø–∫—É</b>', parse_mode='html', reply_markup=kb)

    with open(f'multibot_users_data_txt/multibot_user_and_id____{str(message.from_user.username)}____{str(message.from_user.id)}.txt', 'a', encoding='utf-8') as f:
        f.write(f'\nNew user\nuser_name -->  @{str(message.from_user.username)}\nuser_id -->  {str(message.from_user.id)}\nuser_first_name -->  {str(message.from_user.first_name)}\nuser_last_name -->  {str(message.from_user.last_name)}\n\n' + f'{time.strftime("%d-%m-%Y %H:%M:%S ", time.localtime())}@{str(message.from_user.username)}({str(message.from_user.id)}) |   ' + str(message.text))
    time.sleep(0.7)

@bot.message_handler(commands=['help'])
def start(message):
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    btn1 = types.KeyboardButton('üå§Ô∏è –ü–æ–≥–æ–¥–∞')
    btn2 = types.KeyboardButton('üí∞ –ö—É—Ä—Å –≤–∞–ª—é—Ç')
    btn3 = types.KeyboardButton('üü¢ –î–∞–ª–µ–µ')
    kb.add(btn1, btn2, btn3)

    bot.send_message(message.chat.id, '<b>/help</b> - –∫–æ–º–∞–Ω–¥–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ ‚öô\n<b>/start</b> - –∫–æ–º–∞–Ω–¥–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ üïπÔ∏è\n/readlog - –∫–æ–º–∞–Ω–¥–∞ —á—Ç–µ–Ω–∏—è –∞—Ä—Ö–∏–≤–∞ üëÅÔ∏è', parse_mode='html')
    time.sleep(1)
    pic_1 = open(r'pic_1.jpg', 'rb')
    bot.send_photo(message.chat.id,pic_1, '<i>–ï—Å–ª–∏ –≤–¥—Ä—É–≥ –ø—Ä–æ–ø–∞–¥—É—Ç –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é, –Ω–∞–∂–º–∏ –Ω–∞ —ç—Ç—É</i> <b>–∫–Ω–æ–ø–∫—É</b>', parse_mode='html', reply_markup=kb)

    with open(f'multibot_users_data_txt/multibot_user_and_id____{str(message.from_user.username)}____{str(message.from_user.id)}.txt', 'a', encoding='utf-8') as f:
        f.write(f'\n{time.strftime("%d-%m-%Y %H:%M:%S ", time.localtime())}@{str(message.from_user.username)}({str(message.from_user.id)}) |   ' + str(message.text))
    time.sleep(0.7)

@bot.message_handler(commands=['readlog'])
def start(message):
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    btn1 = types.KeyboardButton('üå§Ô∏è –ü–æ–≥–æ–¥–∞')
    btn2 = types.KeyboardButton('üí∞ –ö—É—Ä—Å –≤–∞–ª—é—Ç')
    btn3 = types.KeyboardButton('üü¢ –î–∞–ª–µ–µ')
    kb.add(btn1, btn2, btn3)

    bot.send_message(message.chat.id, '–¢—É—Ç —Ç—ã –º–æ–∂–µ—à—å –ø—Ä–æ—á–µ—Å—Ç—å <b>–≤—Å—é –∏—Å—Ç–æ—Ä–∏—é</b> –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è <b>–±–æ—Ç–∞</b> üëÅÔ∏è', parse_mode='html', reply_markup=kb)

    with open(f'multibot_users_data_txt/multibot_user_and_id____{str(message.from_user.username)}____{str(message.from_user.id)}.txt', 'r', encoding='utf-8') as f:
        txt = f.read()
        for msg in util.split_string(txt, 1000):
            bot.send_message(message.chat.id, msg)
        





# OWM
@bot.message_handler(chat_types= ['private'], func=lambda x: x.text == 'üå§Ô∏è –ü–æ–≥–æ–¥–∞')
def bot_message_owm_1(message):
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=3)
    btn1 = types.KeyboardButton('–û–¥–µ—Å—Å–∞')
    btn2 = types.KeyboardButton('–ö–∏–µ–≤')
    btn3 = types.KeyboardButton('–õ—å–≤–æ–≤')
    btn4 = types.KeyboardButton('–ú–æ—Å–∫–≤–∞')
    btn5 = types.KeyboardButton('–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥')
    btn6 = types.KeyboardButton('–ú–∏–Ω—Å–∫')
    btn7 = types.KeyboardButton('–ù—å—é-–ô–æ—Ä–∫')
    btn8 = types.KeyboardButton('–ë–µ—Ä–ª–∏–Ω')
    btn9 = types.KeyboardButton('–†–∏–º')
    main = types.KeyboardButton('‚§µÔ∏è–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
    kb.add(btn1, btn2, btn3,btn4, btn5, btn6,btn7, btn8, btn9)
    kb.add(main)
    sent = bot.reply_to(message, bot_text['enter_city'], parse_mode='html', reply_markup=kb)
    bot.register_next_step_handler(sent, owm)

    with open(f'multibot_users_data_txt/multibot_user_and_id____{str(message.from_user.username)}____{str(message.from_user.id)}.txt', 'a', encoding='utf-8') as f:
        f.write(f'\n{time.strftime("%d-%m-%Y %H:%M:%S ", time.localtime())}@{str(message.from_user.username)}({str(message.from_user.id)}) |   ' + str(message.text))
    time.sleep(0.7)

# OWM
def owm(message):
    try:
        kb = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
        btn1 = types.KeyboardButton('‚òÇÔ∏è  –ü–æ–≥–æ–¥–∞ –≤ –¥—Ä—É–≥–æ–º –≥–æ—Ä–æ–¥–µ')
        main = types.KeyboardButton('‚§µÔ∏è–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
        kb.add(btn1)
        kb.add(main)
        message_to_save = message.text
        config_dict = get_default_config()  # ru
        config_dict['language'] = 'ru'  # ru
        owm = OWM(cfg.date['OWM_API_KEY'])
        place = message.text
        mgr = owm.weather_manager()
        observation = mgr.weather_at_place(place)
        w = observation.weather
        t = w.temperature('celsius')
        t1 = t['temp']
        t2 = t['feels_like']
        t3 = t['temp_max']
        t4 = t['temp_min']
        # –í–µ—Ç–µ—Ä
        wind = w.wind()['speed']
        # –í–ª–∞–∂–Ω–æ—Å—Ç—å
        humidity = w.humidity
        # –û–±–ª–∞—á–Ω–æ—Å—Ç—å
        cloudy = w.clouds
        # –°—Ç–∞—Ç—É—Å
        st = w.status
        # –î–µ—Ç–∞–ª–∏
        dt = w.detailed_status
        # –í—Ä–µ–º—è(–¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ)
        tm = w.reference_time('iso')
        # –î–∞–≤–ª–µ–Ω–∏–µ
        pr = w.pressure['press']
        # –í–∏–¥–∏–º–º–æ—Å—Ç—å
        vd = w.visibility_distance
        weather_forecast = f'–í–∞—à –∑–∞–ø—Ä–æ—Å –ø–æ –≥–æ—Ä–æ–¥—É <b>{place}</b>:\n\n<b>1.</b> <i>–¢–µ–º–ø–µ—Ä–∞—Ç—Ä–∞</i>: {int(t1)}¬∞C \
        \n<b>2.</b> <i>–û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫</i>: {int(t2)}¬∞C\n<b>3.</b> <i>–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è</i>: {int(t3)}¬∞C \
        \n<b>4.</b> <i>–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è</i>: {int(t4)}¬∞C\n<b>5.</b> <i>–°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞</i>: {int(wind)} –º/—Å\n<b>6.</b> <i>–í–ª–∞–∂–Ω–æ—Å—Ç—å</i>: {humidity} % \
        \n<b>7.</b> <i>–û–±–ª–∞—á–Ω–æ—Å—Ç—å</i>: {cloudy} %\n<b>8.</b> <i>–°—Ç–∞—Ç—É—Å</i>: {st}\n<b>9.</b> <i>–î–µ—Ç–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å</i>: {dt} \
        \n<b>10.</b> <i>–°–ø—Ä–∞–≤–æ—á–Ω–æ–µ –≤—Ä–µ–º—è</i>: {tm}\n<b>11.</b> <i>–î–∞–≤–ª–µ–Ω–∏–µ</i>: {pr} –º–º.—Ä—Ç.—Å—Ç\n<b>12.</b> <i>–í–∏–¥–∏–º–æ—Å—Ç—å</i>: {vd} –º.'
        bot.send_message(message.chat.id, weather_forecast, parse_mode='html', reply_markup=kb)

        with open(f'multibot_users_data_txt/multibot_user_and_id____{str(message.from_user.username)}____{str(message.from_user.id)}.txt', 'a', encoding='utf-8') as f:
            f.write(f'\n{time.strftime("%d-%m-%Y %H:%M:%S ", time.localtime())}@{str(message.from_user.username)}({str(message.from_user.id)}) |   ' + str(message.text) + ' ' + str(weather_forecast))
        time.sleep(0.7)

    except:
        bot.send_message(message.chat.id, '<b>–¢–∞–∫–æ–π –≥–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω!</b>', parse_mode='html', reply_markup=kb)

        with open(f'multibot_users_data_txt/multibot_user_and_id____{str(message.from_user.username)}____{str(message.from_user.id)}.txt', 'a', encoding='utf-8') as f:
            f.write(f'\n{time.strftime("%d-%m-%Y %H:%M:%S ", time.localtime())}@{str(message.from_user.username)}({str(message.from_user.id)}) |   ' + str(message.text) + ' - –Ω–µ –Ω–∞–π–¥–µ–Ω.')
        time.sleep(0.7)

# OWM
@bot.message_handler(chat_types= ['private'], func=lambda x: x.text == '‚òÇÔ∏è  –ü–æ–≥–æ–¥–∞ –≤ –¥—Ä—É–≥–æ–º –≥–æ—Ä–æ–¥–µ')
def bot_message_owm_2(message):
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=3)
    btn1 = types.KeyboardButton('–û–¥–µ—Å—Å–∞')
    btn2 = types.KeyboardButton('–ö–∏–µ–≤')
    btn3 = types.KeyboardButton('–õ—å–≤–æ–≤')
    btn4 = types.KeyboardButton('–ú–æ—Å–∫–≤–∞')
    btn5 = types.KeyboardButton('–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥')
    btn6 = types.KeyboardButton('–ú–∏–Ω—Å–∫')
    btn7 = types.KeyboardButton('–ù—å—é-–ô–æ—Ä–∫')
    btn8 = types.KeyboardButton('–ë–µ—Ä–ª–∏–Ω')
    btn9 = types.KeyboardButton('–†–∏–º')
    main = types.KeyboardButton('‚§µÔ∏è–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
    kb.add(btn1, btn2, btn3,btn4, btn5, btn6,btn7, btn8, btn9)
    kb.add(main)
    sent = bot.reply_to(message, bot_text['enter_city'], parse_mode='html', reply_markup=kb)
    bot.register_next_step_handler(sent, owm)

    with open(f'multibot_users_data_txt/multibot_user_and_id____{str(message.from_user.username)}____{str(message.from_user.id)}.txt', 'a', encoding='utf-8') as f:
        f.write(f'\n{time.strftime("%d-%m-%Y %H:%M:%S ", time.localtime())}@{str(message.from_user.username)}({str(message.from_user.id)}) |   ' + str(message.text))
    time.sleep(0.7)




# currency
@bot.message_handler(chat_types= ['private'], func=lambda x: x.text == 'üí∞ –ö—É—Ä—Å –≤–∞–ª—é—Ç')
def bot_message_cur_1(message):
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    btn1 = types.KeyboardButton('EUR')
    btn2 = types.KeyboardButton('USD')
    main = types.KeyboardButton('‚§µÔ∏è–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
    kb.add(btn1, btn2)
    kb.add(main)
    msg = bot.send_message(message.chat.id, '–£–∑–Ω–∞—Ç—å –Ω–∞–ª–∏—á–Ω—ã–π –∫—É—Ä—Å <b>–ü—Ä–∏–≤–∞—Ç–ë–∞–Ω–∫–∞</b>\n(–≤ –æ—Ç–¥–µ–ª–µ–Ω–∏—è—Ö): ', parse_mode='html', reply_markup=kb)
    bot.register_next_step_handler(msg, currency)

    with open(f'multibot_users_data_txt/multibot_user_and_id____{str(message.from_user.username)}____{str(message.from_user.id)}.txt', 'a', encoding='utf-8') as f:
        f.write(f'\n{time.strftime("%d-%m-%Y %H:%M:%S ", time.localtime())}@{str(message.from_user.username)}({str(message.from_user.id)}) |   ' + str(message.text))
    time.sleep(0.7)

# currency
def currency(message):
    try:
        kb = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
        btn1 = types.KeyboardButton('üí∂ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥—Ä—É–≥—É—é –≤–∞–ª—é—Ç—É')
        main = types.KeyboardButton('‚§µÔ∏è–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
        kb.add(btn1)
        kb.add(main)

        for coin in response:
            if (message.text == coin['ccy']):
                print_coin_text = print_coin(coin['buy'], coin['sale'])
                bot.send_message(message.chat.id, print_coin_text, parse_mode='html', reply_markup=kb)

                with open(f'multibot_users_data_txt/multibot_user_and_id____{str(message.from_user.username)}____{str(message.from_user.id)}.txt', 'a', encoding='utf-8') as f:
                    f.write(f'\n{time.strftime("%d-%m-%Y %H:%M:%S ", time.localtime())}@{str(message.from_user.username)}({str(message.from_user.id)}) |   ' + str(message.text) + f' {print_coin_text}')
                time.sleep(0.7)

    except Exception:
        bot.reply_to(message, 'ooops!')

# currency
def print_coin(buy, sale):
    """–í—ã–≤–æ–¥ –∫—É—Ä—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."""
    return '<b>üíµ –ö—É—Ä—Å –ø–æ–∫—É–ø–∫–∏:</b>' + str(buy) + '\n<b>üíµ –ö—É—Ä—Å –ø—Ä–æ–¥–∞–∂–∏:</b>' + str(sale)

# currency
@bot.message_handler(chat_types= ['private'], func=lambda x: x.text == 'üí∂ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥—Ä—É–≥—É—é –≤–∞–ª—é—Ç—É')
def bot_message_cur_2(message):
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    btn1 = types.KeyboardButton('EUR')
    btn2 = types.KeyboardButton('USD')
    main = types.KeyboardButton('‚§µÔ∏è–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
    kb.add(btn1, btn2)
    kb.add(main)
    msg = bot.send_message(message.chat.id, '–£–∑–Ω–∞—Ç—å –Ω–∞–ª–∏—á–Ω—ã–π –∫—É—Ä—Å <b>–ü—Ä–∏–≤–∞—Ç–ë–∞–Ω–∫–∞</b>\n(–≤ –æ—Ç–¥–µ–ª–µ–Ω–∏—è—Ö): ', parse_mode='html', reply_markup=kb)
    bot.register_next_step_handler(msg, currency)

    with open(f'multibot_users_data_txt/multibot_user_and_id____{str(message.from_user.username)}____{str(message.from_user.id)}.txt', 'a', encoding='utf-8') as f:
        f.write(f'\n{time.strftime("%d-%m-%Y %H:%M:%S ", time.localtime())}@{str(message.from_user.username)}({str(message.from_user.id)}) |   ' + str(message.text))
    time.sleep(0.7)




# menu p.2
@bot.message_handler(chat_types= ['private'], func=lambda x: x.text == 'üü¢ –î–∞–ª–µ–µ')
def bot_message_p_2(message):
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    btn1 = types.KeyboardButton('üó£Ô∏è –ü–µ—Ä–µ–≤–æ–¥—á–∏–∫')
    btn2 = types.KeyboardButton('üí° –§–∞–∫—Ç—ã –æ —á–∏—Å–ª–∞—Ö')
    main = types.KeyboardButton('‚§µÔ∏è–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
    kb.add(btn1, btn2)
    kb.add(main)
    bot.send_message(message.chat.id, 'üü¢ –î–∞–ª–µ–µ', parse_mode='html', reply_markup=kb)

    with open(f'multibot_users_data_txt/multibot_user_and_id____{str(message.from_user.username)}____{str(message.from_user.id)}.txt', 'a', encoding='utf-8') as f:
        f.write(f'\n{time.strftime("%d-%m-%Y %H:%M:%S ", time.localtime())}@{str(message.from_user.username)}({str(message.from_user.id)}) |   ' + str(message.text))
    time.sleep(0.7)




# translator
@bot.message_handler(chat_types= ['private'], func=lambda x: x.text == 'üó£Ô∏è –ü–µ—Ä–µ–≤–æ–¥—á–∏–∫')
def bot_message_trans_1(message):
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    btn1 = types.KeyboardButton('üá∑üá∫ (ru-en) üá∫üá∏')
    btn2 = types.KeyboardButton('üá∫üá∏ (en-ru) üá∑üá∫')
    btn3 = types.KeyboardButton('üá∑üá∫ (ru-uk) üá∫üá¶')
    btn4 = types.KeyboardButton('üá∫üá¶ (uk-ru) üá∑üá∫')
    main = types.KeyboardButton('‚§µÔ∏è–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
    kb.add(btn1, btn2, btn3, btn4)
    kb.add(main)
    bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ —Å –∫–∞–∫–æ–≥–æ —è–∑—ã–∫–∞ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –ø–µ—Ä–µ–≤–æ–¥ –∏ –Ω–∞ –∫–∞–∫–æ–π —è–∑—ã–∫: ', parse_mode='html', reply_markup=kb)

    with open(f'multibot_users_data_txt/multibot_user_and_id____{str(message.from_user.username)}____{str(message.from_user.id)}.txt', 'a', encoding='utf-8') as f:
        f.write(f'\n{time.strftime("%d-%m-%Y %H:%M:%S ", time.localtime())}@{str(message.from_user.username)}({str(message.from_user.id)}) |   ' + str(message.text))
    time.sleep(0.7)

# translator ru-en
@bot.message_handler(chat_types= ['private'], func=lambda x: x.text == 'üá∑üá∫ (ru-en) üá∫üá∏')
def bot_message_ru_en(message):
    kb = types.ReplyKeyboardRemove(selective=False)
    msg = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ <b>—Å–ª–æ–≤–æ</b>, –ª–∏–±–æ <b>—Å–ª–æ–≤–æ—Å–æ—á–µ—Ç–∞–Ω–∏–µ</b>, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å <b>–ø–µ—Ä–µ–≤–æ–¥:</b> ', parse_mode='html', reply_markup=kb)
    bot.register_next_step_handler(msg, ru_en)

    with open(f'multibot_users_data_txt/multibot_user_and_id____{str(message.from_user.username)}____{str(message.from_user.id)}.txt', 'a', encoding='utf-8') as f:
        f.write(f'\n{time.strftime("%d-%m-%Y %H:%M:%S ", time.localtime())}@{str(message.from_user.username)}({str(message.from_user.id)}) |   ' + str(message.text))
    time.sleep(0.7)

def ru_en(message):
    try:
        kb = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
        btn1 = types.KeyboardButton('üîÉ –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥')
        main = types.KeyboardButton('‚§µÔ∏è–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
        kb.add(btn1)
        kb.add(main)
        message_to_save = message.text
        translator = Translator()
        translation = translator.translate(text=message.text, src='ru', dest='en')
        bot.send_message(message.chat.id, '<b>–í–∞—à –ø–µ—Ä–µ–≤–æ–¥:</b>\nüíé ' + translation.text + ' üíé', parse_mode='html', reply_markup=kb)

        with open(f'multibot_users_data_txt/multibot_user_and_id____{str(message.from_user.username)}____{str(message.from_user.id)}.txt', 'a', encoding='utf-8') as f:
            f.write(f'\n{time.strftime("%d-%m-%Y %H:%M:%S ", time.localtime())}@{str(message.from_user.username)}({str(message.from_user.id)}) |   ' + str(message.text) + ' -->' + str(translation.text))
        time.sleep(0.7)

    except:
        bot.send_message(message.chat.id, '<b>–¢–∞–∫–æ–µ —Å–ª–æ–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!</b>', parse_mode='html', reply_markup=kb)

        with open(f'multibot_users_data_txt/multibot_user_and_id____{str(message.from_user.username)}____{str(message.from_user.id)}.txt', 'a', encoding='utf-8') as f:
            f.write(f'\n{time.strftime("%d-%m-%Y %H:%M:%S ", time.localtime())}@{str(message.from_user.username)}({str(message.from_user.id)}) |   ' + str(message.text) + ' - –Ω–µ –Ω–∞–π–¥–µ–Ω.')
        time.sleep(0.7)

# translator en_ru
@bot.message_handler(chat_types= ['private'], func=lambda x: x.text == 'üá∫üá∏ (en-ru) üá∑üá∫')
def bot_message_en_ru(message):
    kb = types.ReplyKeyboardRemove(selective=False)
    msg = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ <b>—Å–ª–æ–≤–æ</b>, –ª–∏–±–æ <b>—Å–ª–æ–≤–æ—Å–æ—á–µ—Ç–∞–Ω–∏–µ</b>, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å <b>–ø–µ—Ä–µ–≤–æ–¥:</b> ', parse_mode='html', reply_markup=kb)
    bot.register_next_step_handler(msg, en_ru)

    with open(f'multibot_users_data_txt/multibot_user_and_id____{str(message.from_user.username)}____{str(message.from_user.id)}.txt', 'a', encoding='utf-8') as f:
        f.write(f'\n{time.strftime("%d-%m-%Y %H:%M:%S ", time.localtime())}@{str(message.from_user.username)}({str(message.from_user.id)}) |   ' + str(message.text))
    time.sleep(0.7)

def en_ru(message):
    try:
        kb = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
        btn1 = types.KeyboardButton('üîÉ –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥')
        main = types.KeyboardButton('‚§µÔ∏è–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
        kb.add(btn1)
        kb.add(main)
        message_to_save = message.text
        translator = Translator()
        translation = translator.translate(text=message.text, src='en', dest='ru')
        bot.send_message(message.chat.id, '<b>–í–∞—à –ø–µ—Ä–µ–≤–æ–¥:</b>\nüíé ' + translation.text + ' üíé', parse_mode='html', reply_markup=kb)

        with open(f'multibot_users_data_txt/multibot_user_and_id____{str(message.from_user.username)}____{str(message.from_user.id)}.txt', 'a', encoding='utf-8') as f:
            f.write(f'\n{time.strftime("%d-%m-%Y %H:%M:%S ", time.localtime())}@{str(message.from_user.username)}({str(message.from_user.id)}) |   ' + str(message.text) + ' -->' + str(translation.text))
        time.sleep(0.7)

    except:
        bot.send_message(message.chat.id, '<b>–¢–∞–∫–æ–µ —Å–ª–æ–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!</b>', parse_mode='html', reply_markup=kb)

        with open(f'multibot_users_data_txt/multibot_user_and_id____{str(message.from_user.username)}____{str(message.from_user.id)}.txt', 'a', encoding='utf-8') as f:
            f.write(f'\n{time.strftime("%d-%m-%Y %H:%M:%S ", time.localtime())}@{str(message.from_user.username)}({str(message.from_user.id)}) |   ' + str(message.text) + ' - –Ω–µ –Ω–∞–π–¥–µ–Ω.')
        time.sleep(0.7)

# translator ru_uk
@bot.message_handler(chat_types= ['private'], func=lambda x: x.text == 'üá∑üá∫ (ru-uk) üá∫üá¶')
def bot_message_en_ru(message):
    kb = types.ReplyKeyboardRemove(selective=False)
    msg = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ <b>—Å–ª–æ–≤–æ</b>, –ª–∏–±–æ <b>—Å–ª–æ–≤–æ—Å–æ—á–µ—Ç–∞–Ω–∏–µ</b>, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å <b>–ø–µ—Ä–µ–≤–æ–¥:</b> ', parse_mode='html', reply_markup=kb)
    bot.register_next_step_handler(msg, ru_uk)

    with open(f'multibot_users_data_txt/multibot_user_and_id____{str(message.from_user.username)}____{str(message.from_user.id)}.txt', 'a', encoding='utf-8') as f:
        f.write(f'\n{time.strftime("%d-%m-%Y %H:%M:%S ", time.localtime())}@{str(message.from_user.username)}({str(message.from_user.id)}) |   ' + str(message.text))
    time.sleep(0.7)

def ru_uk(message):
    try:
        kb = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
        btn1 = types.KeyboardButton('üîÉ –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥')
        main = types.KeyboardButton('‚§µÔ∏è–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
        kb.add(btn1)
        kb.add(main)
        message_to_save = message.text
        translator = Translator()
        translation = translator.translate(text=message.text, src='ru', dest='uk')
        bot.send_message(message.chat.id, '<b>–í–∞—à –ø–µ—Ä–µ–≤–æ–¥:</b>\nüíé ' + translation.text + ' üíé', parse_mode='html', reply_markup=kb)

        with open(f'multibot_users_data_txt/multibot_user_and_id____{str(message.from_user.username)}____{str(message.from_user.id)}.txt', 'a', encoding='utf-8') as f:
            f.write(f'\n{time.strftime("%d-%m-%Y %H:%M:%S ", time.localtime())}@{str(message.from_user.username)}({str(message.from_user.id)}) |   ' + str(message.text) + ' -->' + str(translation.text))
        time.sleep(0.7)

    except:
        bot.send_message(message.chat.id, '<b>–¢–∞–∫–æ–µ —Å–ª–æ–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!</b>', parse_mode='html', reply_markup=kb)

        with open(f'multibot_users_data_txt/multibot_user_and_id____{str(message.from_user.username)}____{str(message.from_user.id)}.txt', 'a', encoding='utf-8') as f:
            f.write(f'\n{time.strftime("%d-%m-%Y %H:%M:%S ", time.localtime())}@{str(message.from_user.username)}({str(message.from_user.id)}) |   ' + str(message.text) + ' - –Ω–µ –Ω–∞–π–¥–µ–Ω.')
        time.sleep(0.7)

# translator uk_ru
@bot.message_handler(chat_types= ['private'], func=lambda x: x.text == 'üá∫üá¶ (uk-ru) üá∑üá∫')
def bot_message_en_ru(message):
    kb = types.ReplyKeyboardRemove(selective=False)
    msg = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ <b>—Å–ª–æ–≤–æ</b>, –ª–∏–±–æ <b>—Å–ª–æ–≤–æ—Å–æ—á–µ—Ç–∞–Ω–∏–µ</b>, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å <b>–ø–µ—Ä–µ–≤–æ–¥:</b> ', parse_mode='html', reply_markup=kb)
    bot.register_next_step_handler(msg, uk_ru)

    with open(f'multibot_users_data_txt/multibot_user_and_id____{str(message.from_user.username)}____{str(message.from_user.id)}.txt', 'a', encoding='utf-8') as f:
        f.write(f'\n{time.strftime("%d-%m-%Y %H:%M:%S ", time.localtime())}@{str(message.from_user.username)}({str(message.from_user.id)}) |   ' + str(message.text))
    time.sleep(0.7)

def uk_ru(message):
    try:
        kb = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
        btn1 = types.KeyboardButton('üîÉ –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥')
        main = types.KeyboardButton('‚§µÔ∏è–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
        kb.add(btn1)
        kb.add(main)
        message_to_save = message.text
        translator = Translator()
        translation = translator.translate(text=message.text, src='uk', dest='ru')
        bot.send_message(message.chat.id, '<b>–í–∞—à –ø–µ—Ä–µ–≤–æ–¥:</b>\nüíé ' + translation.text + ' üíé', parse_mode='html', reply_markup=kb)

        with open(f'multibot_users_data_txt/multibot_user_and_id____{str(message.from_user.username)}____{str(message.from_user.id)}.txt', 'a', encoding='utf-8') as f:
            f.write(f'\n{time.strftime("%d-%m-%Y %H:%M:%S ", time.localtime())}@{str(message.from_user.username)}({str(message.from_user.id)}) |   ' + str(message.text) + ' -->' + str(translation.text))
        time.sleep(0.7)

    except:
        bot.send_message(message.chat.id, '<b>–¢–∞–∫–æ–µ —Å–ª–æ–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!</b>', parse_mode='html', reply_markup=kb)

        with open(f'multibot_users_data_txt/multibot_user_and_id____{str(message.from_user.username)}____{str(message.from_user.id)}.txt', 'a', encoding='utf-8') as f:
            f.write(f'\n{time.strftime("%d-%m-%Y %H:%M:%S ", time.localtime())}@{str(message.from_user.username)}({str(message.from_user.id)}) |   ' + str(message.text) + ' - –Ω–µ –Ω–∞–π–¥–µ–Ω.')
        time.sleep(0.7)

# translator repeat
@bot.message_handler(chat_types= ['private'], func=lambda x: x.text == 'üîÉ –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥')
def bot_message_repeat(message):
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    btn1 = types.KeyboardButton('üá∑üá∫ (ru-en) üá∫üá∏')
    btn2 = types.KeyboardButton('üá∫üá∏ (en-ru) üá∑üá∫')
    btn3 = types.KeyboardButton('üá∑üá∫ (ru-uk) üá∫üá¶')
    btn4 = types.KeyboardButton('üá∫üá¶ (uk-ru) üá∑üá∫')
    main = types.KeyboardButton('‚§µÔ∏è–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
    kb.add(btn1, btn2, btn3, btn4)
    kb.add(main)
    bot.send_message(message.chat.id, '<b>–†–∞–¥, —á—Ç–æ –±—ã–ª –ø–æ–ª–µ–∑–µ–Ω —Ç–µ–±–µ!</b>\n<i>–ö–∞–∫–æ–π –Ω–∞ —ç—Ç–æ—Ç —Ä–∞–∑ —Å–¥–µ–ª–∞—Ç—å –ø–µ—Ä–µ–≤–æ–¥ ?</i>', parse_mode='html', reply_markup=kb)

    with open(f'multibot_users_data_txt/multibot_user_and_id____{str(message.from_user.username)}____{str(message.from_user.id)}.txt', 'a', encoding='utf-8') as f:
        f.write(f'\n{time.strftime("%d-%m-%Y %H:%M:%S ", time.localtime())}@{str(message.from_user.username)}({str(message.from_user.id)}) |   ' + str(message.text))
    time.sleep(0.7)




# numbers
@bot.message_handler(chat_types= ['private'], func=lambda x: x.text == 'üí° –§–∞–∫—Ç—ã –æ —á–∏—Å–ª–∞—Ö')
def bot_message_num(message):
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    btn1 = types.KeyboardButton('–ú–µ–ª–æ—á–∏')
    btn2 = types.KeyboardButton('–ì–æ–¥')
    btn3 = types.KeyboardButton('–î–∞—Ç–∞')
    btn4 = types.KeyboardButton('–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞')
    btn5 = types.KeyboardButton('üü£ –§–∞–∫—Ç –æ —á–∏—Å–ª–µ (0 - 100)')
    main = types.KeyboardButton('‚§µÔ∏è–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
    kb.add(btn1, btn2, btn3, btn4, btn5)
    kb.add(main)
    bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ <b>–≥—Ä—É–ø–ø—É —Ñ–∞–∫—Ç–æ–≤ :</b>', parse_mode='html', reply_markup=kb)

    with open(f'multibot_users_data_txt/multibot_user_and_id____{str(message.from_user.username)}____{str(message.from_user.id)}.txt', 'a', encoding='utf-8') as f:
        f.write(f'\n{time.strftime("%d-%m-%Y %H:%M:%S ", time.localtime())}@{str(message.from_user.username)}({str(message.from_user.id)}) |   ' + str(message.text))
    time.sleep(0.7)

# numbers
def text_translator_numbers(text='Text', src='en', dest='ru'):
    try:
        translator = Translator()
        translation = translator.translate(text=text, src=src, dest=dest)
        return translation.text

    except Exception as ex:
        return ex

# numbers
@bot.message_handler(chat_types= ['private'], func=lambda x: x.text == '–ú–µ–ª–æ—á–∏')
def bot_message_num_0(message):
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
    btn1 = types.KeyboardButton('üß† –ë–æ–ª—å—à–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö —Ñ–∞–∫—Ç–æ–≤ –æ —á–∏—Å–ª–∞—Ö')
    main = types.KeyboardButton('‚§µÔ∏è–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
    kb.add(btn1)
    kb.add(main)
    number_answer = requests.get(f'http://numbersapi.com/random/trivia?json')
    bot_text_answer_eng = json.loads(number_answer.text)['text']
    bot_text_answer_ru = text_translator_numbers(text=bot_text_answer_eng, src='en', dest='ru')
    bot.send_message(message.chat.id, '<b>Answer on english language:</b>\n' + f'<i>{bot_text_answer_eng}</i>' + '\n\n<b>–û—Ç–≤–µ—Ç –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ:</b>\n' + f'<i>{bot_text_answer_ru}</i>',parse_mode='html', reply_markup=kb)

    with open(f'multibot_users_data_txt/multibot_user_and_id____{str(message.from_user.username)}____{str(message.from_user.id)}.txt', 'a', encoding='utf-8') as f:
        f.write(f'\n{time.strftime("%d-%m-%Y %H:%M:%S ", time.localtime())}@{str(message.from_user.username)}({str(message.from_user.id)}) |   ' + str(message.text) + ' ' + str(bot_text_answer_eng) + ' ' + str(bot_text_answer_ru))
    time.sleep(0.7)

# numbers
@bot.message_handler(chat_types= ['private'], func=lambda x: x.text == '–ì–æ–¥')
def bot_message_num_1(message):
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
    btn1 = types.KeyboardButton('üß† –ë–æ–ª—å—à–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö —Ñ–∞–∫—Ç–æ–≤ –æ —á–∏—Å–ª–∞—Ö')
    main = types.KeyboardButton('‚§µÔ∏è–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
    kb.add(btn1)
    kb.add(main)
    number_answer = requests.get(f'http://numbersapi.com/random/year?json')
    bot_text_answer_eng = json.loads(number_answer.text)['text']
    bot_text_answer_ru = text_translator_numbers(text=bot_text_answer_eng, src='en', dest='ru')
    bot.send_message(message.chat.id, '<b>Answer on english language:</b>\n' + f'<i>{bot_text_answer_eng}</i>' + '\n\n<b>–û—Ç–≤–µ—Ç –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ:</b>\n' + f'<i>{bot_text_answer_ru}</i>',parse_mode='html', reply_markup=kb)

    with open(f'multibot_users_data_txt/multibot_user_and_id____{str(message.from_user.username)}____{str(message.from_user.id)}.txt', 'a', encoding='utf-8') as f:
        f.write(f'\n{time.strftime("%d-%m-%Y %H:%M:%S ", time.localtime())}@{str(message.from_user.username)}({str(message.from_user.id)}) |   ' + str(message.text) + ' ' + str(bot_text_answer_eng) + ' ' + str(bot_text_answer_ru))
    time.sleep(0.7)

# numbers
@bot.message_handler(chat_types= ['private'], func=lambda x: x.text == '–î–∞—Ç–∞')
def bot_message_num_2(message):
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
    btn1 = types.KeyboardButton('üß† –ë–æ–ª—å—à–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö —Ñ–∞–∫—Ç–æ–≤ –æ —á–∏—Å–ª–∞—Ö')
    main = types.KeyboardButton('‚§µÔ∏è–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
    kb.add(btn1)
    kb.add(main)
    number_answer = requests.get(f'http://numbersapi.com/random/date?json')
    bot_text_answer_eng = json.loads(number_answer.text)['text']
    bot_text_answer_ru = text_translator_numbers(text=bot_text_answer_eng, src='en', dest='ru')
    bot.send_message(message.chat.id, '<b>Answer on english language:</b>\n' + f'<i>{bot_text_answer_eng}</i>' + '\n\n<b>–û—Ç–≤–µ—Ç –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ:</b>\n' + f'<i>{bot_text_answer_ru}</i>',parse_mode='html', reply_markup=kb)

    with open(f'multibot_users_data_txt/multibot_user_and_id____{str(message.from_user.username)}____{str(message.from_user.id)}.txt', 'a', encoding='utf-8') as f:
        f.write(f'\n{time.strftime("%d-%m-%Y %H:%M:%S ", time.localtime())}@{str(message.from_user.username)}({str(message.from_user.id)}) |   ' + str(message.text) + ' ' + str(bot_text_answer_eng) + ' ' + str(bot_text_answer_ru))
    time.sleep(0.7)

# numbers
@bot.message_handler(chat_types= ['private'], func=lambda x: x.text == '–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞')
def bot_message_num_3(message):
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
    btn1 = types.KeyboardButton('üß† –ë–æ–ª—å—à–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö —Ñ–∞–∫—Ç–æ–≤ –æ —á–∏—Å–ª–∞—Ö')
    main = types.KeyboardButton('‚§µÔ∏è–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
    kb.add(btn1)
    kb.add(main)
    number_answer = requests.get(f'http://numbersapi.com/random/math?json')
    bot_text_answer_eng = json.loads(number_answer.text)['text']
    bot_text_answer_ru = text_translator_numbers(text=bot_text_answer_eng, src='en', dest='ru')
    bot.send_message(message.chat.id, '<b>Answer on english language:</b>\n' + f'<i>{bot_text_answer_eng}</i>' + '\n\n<b>–û—Ç–≤–µ—Ç –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ:</b>\n' + f'<i>{bot_text_answer_ru}</i>',parse_mode='html', reply_markup=kb)

    with open(f'multibot_users_data_txt/multibot_user_and_id____{str(message.from_user.username)}____{str(message.from_user.id)}.txt', 'a', encoding='utf-8') as f:
        f.write(f'\n{time.strftime("%d-%m-%Y %H:%M:%S ", time.localtime())}@{str(message.from_user.username)}({str(message.from_user.id)}) |   ' + str(message.text) + ' ' + str(bot_text_answer_eng) + ' ' + str(bot_text_answer_ru))
    time.sleep(0.7)

# numbers
@bot.message_handler(chat_types= ['private'], func=lambda x: x.text == 'üü£ –§–∞–∫—Ç –æ —á–∏—Å–ª–µ (0 - 100)')
def bot_message_num_4(message):
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    main = types.KeyboardButton('‚§µÔ∏è–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
    kb.add(main)
    msg = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ <b>–ª—é–±–æ–µ —á–∏—Å–ª–æ</b>, —á—Ç–æ–± —É–∑–Ω–∞—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç –æ –Ω–µ–º.', parse_mode='html', reply_markup=kb)
    bot.register_next_step_handler(msg, any_number)

    with open(f'multibot_users_data_txt/multibot_user_and_id____{str(message.from_user.username)}____{str(message.from_user.id)}.txt', 'a', encoding='utf-8') as f:
        f.write(f'\n{time.strftime("%d-%m-%Y %H:%M:%S ", time.localtime())}@{str(message.from_user.username)}({str(message.from_user.id)}) |   ' + str(message.text))
    time.sleep(0.7)

# numbers
def any_number(message):
    try:
        kb = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
        btn1 = types.KeyboardButton('üß† –ë–æ–ª—å—à–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö —Ñ–∞–∫—Ç–æ–≤ –æ —á–∏—Å–ª–∞—Ö')
        main = types.KeyboardButton('‚§µÔ∏è–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
        kb.add(btn1)
        kb.add(main)
        number_answer = requests.get(f'http://numbersapi.com/{message.text}?json')
        bot_text_answer_eng = json.loads(number_answer.text)['text']
        bot_text_answer_ru = text_translator_numbers(text=bot_text_answer_eng, src='en', dest='ru')
        bot.send_message(message.chat.id,'<b>Answer on english language:</b>\n' + f'<i>{bot_text_answer_eng}</i>' + '\n\n<b>–û—Ç–≤–µ—Ç –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ:</b>\n' + f'<i>{bot_text_answer_ru}</i>', parse_mode='html', reply_markup=kb)

        with open(f'multibot_users_data_txt/multibot_user_and_id____{str(message.from_user.username)}____{str(message.from_user.id)}.txt', 'a', encoding='utf-8') as f:
            f.write(f'\n{time.strftime("%d-%m-%Y %H:%M:%S ", time.localtime())}@{str(message.from_user.username)}({str(message.from_user.id)}) |   ' + str(message.text) + ' ' + str(bot_text_answer_eng) + ' ' + str(bot_text_answer_ru))
        time.sleep(0.7)

    except:
        bot.send_message(message.chat.id, '<b>–¢–∞–∫–æ–≥–æ —á–∏—Å–ª–∞ –Ω–µ—Ç –≤ –±–∞–∑–µ —á–∏—Å–µ–ª —Å –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–º–∏ —Ñ–∞–∫—Ç–∞–º–∏!</b>', parse_mode='html', reply_markup=kb)

        with open(f'multibot_users_data_txt/multibot_user_and_id____{str(message.from_user.username)}____{str(message.from_user.id)}.txt', 'a', encoding='utf-8') as f:
            f.write(f'\n@{str(message.from_user.username)}({str(message.from_user.id)}) |   ' + str(message.text) + '- —Ç–∞–∫–æ–≥–æ —á–∏—Å–ª–∞ –Ω–µ—Ç –≤ –±–∞–∑–µ —á–∏—Å–µ–ª —Å –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–º–∏ —Ñ–∞–∫—Ç–∞–º–∏!')
        time.sleep(0.7)

# numbers
@bot.message_handler(chat_types= ['private'], func=lambda x: x.text == 'üß† –ë–æ–ª—å—à–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö —Ñ–∞–∫—Ç–æ–≤ –æ —á–∏—Å–ª–∞—Ö')
def bot_message_num_repeat(message):
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    btn1 = types.KeyboardButton('–ú–µ–ª–æ—á–∏')
    btn2 = types.KeyboardButton('–ì–æ–¥')
    btn3 = types.KeyboardButton('–î–∞—Ç–∞')
    btn4 = types.KeyboardButton('–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞')
    btn5 = types.KeyboardButton('üü£ –§–∞–∫—Ç –æ —á–∏—Å–ª–µ (0 - 100)')
    main = types.KeyboardButton('‚§µÔ∏è–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
    kb.add(btn1, btn2, btn3, btn4, btn5)
    kb.add(main)
    bot.send_message(message.chat.id, '<b>–†–∞–¥, —á—Ç–æ –±—ã–ª –ø–æ–ª–µ–∑–µ–Ω —Ç–µ–±–µ!</b>\n<i>–ö–∞–∫—É—é –Ω–∞ —ç—Ç–æ—Ç —Ä–∞–∑ –≥—Ä—É–ø–ø—É –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å ?</i>', parse_mode='html', reply_markup=kb)

    with open(f'multibot_users_data_txt/multibot_user_and_id____{str(message.from_user.username)}____{str(message.from_user.id)}.txt', 'a', encoding='utf-8') as f:
        f.write(f'\n{time.strftime("%d-%m-%Y %H:%M:%S ", time.localtime())}@{str(message.from_user.username)}({str(message.from_user.id)}) |   ' + str(message.text))
    time.sleep(0.7)




# back to main menu
@bot.message_handler(chat_types= ['private'], func=lambda x: x.text == '‚§µÔ∏è–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
def bot_message_back_menu(message):
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    btn1 = types.KeyboardButton('üå§Ô∏è –ü–æ–≥–æ–¥–∞')
    btn2 = types.KeyboardButton('üí∞ –ö—É—Ä—Å –≤–∞–ª—é—Ç')
    btn3 = types.KeyboardButton('üü¢ –î–∞–ª–µ–µ')
    kb.add(btn1, btn2, btn3)
    bot.send_message(message.chat.id, '‚§µÔ∏è–ì–∞–≤–Ω–æ–µ –º–µ–Ω—é', parse_mode='html', reply_markup=kb)

    with open(f'multibot_users_data_txt/multibot_user_and_id____{str(message.from_user.username)}____{str(message.from_user.id)}.txt', 'a', encoding='utf-8') as f:
        f.write(f'\n{time.strftime("%d-%m-%Y %H:%M:%S ", time.localtime())}@{str(message.from_user.username)}({str(message.from_user.id)}) |   ' + str(message.text))
    time.sleep(0.7)



if __name__ == '__main__':
    print('Bot has been started')
    bot.polling(none_stop=True)
